(.) :: (b -> c) -> (a -> b) -> a -> c

first, fill in a -> b:

(b -> c) -> ((x -> y) -> g x -> g y) -> (x -> y) -> c
                a            b

now, b -> c based on fmap.
(g x -> g y) -> f (g x) -> f (g y)
      b               c

result type of (.) is then
(x -> y) -> f (g x) -> f (g y)
which is equivalent to:

Prelude> :t (fmap . fmap)
(fmap . fmap)
  :: (Functor f2, Functor f1) => (a -> b) -> f1 (f2 a) -> f1 (f2 b)
